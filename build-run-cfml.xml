<?xml version="1.0" encoding="UTF-8"?>
<project default="all" basedir="." name="run-cfml">
	<macrodef name="echots">
		<attribute name="message" />
		<sequential>
			<local name="timestamp" />
			<tstamp>
				<format property="timestamp" pattern="yyyy-MM-dd HH:mm:ss" />
			</tstamp>
			<echo message="---------- ${timestamp} - @{message} ----------" />
		</sequential>
	</macrodef>
	<target name="all">
		<echots message="Lucee Starting" />
		<script language="CFML">
		<![CDATA[
				systemOutput( "---------- #DateTimeFormat(now(),'yyyy-mm-dd HH:nn:ss')# - Lucee Started ----------", true);
				systemOutput( "#server.lucee.version#", true );

				param name="adminPassword" default="admin";
				request.adminPassword = adminPassword;
				request.errorThrown = false;

				try {
					param name="setAdminPassword" default="true";
					if ( setAdminPassword ) {

						// set a password for the admin
						try {
							admin
								action="updatePassword"
								type="web"
								oldPassword=""
								newPassword="#request.adminPassword#";
							systemOutput( "Set Web admin password", true );
						}
						catch(e){
							systemOutput( e.message, true ); // may exist from previous execution
						}

						try {
							admin
								action="updatePassword"
								type="server"
								oldPassword=""
								newPassword="#request.adminPassword#";
							systemOutput( "Set Server admin password", true );
						}
						catch(e){
							systemOutput( e.message, true ); // may exist from previous execution
						}
					}

					admin
						action="updateMapping"
						type="web"
						password="#request.adminPassword#"
						virtual="/"
						physical="#webroot#"
						toplevel="true"
						archive=""
						primary="physical"
						trusted="no";

					systemOutput( "-------------- Mappings --------------", true );
					try {
						admin
							action="getMappings"
							type="web"
							password="#request.adminPassword#"
							returnVariable="mappings";

						loop query="mappings" {
							systemOutput("#mappings.virtual# #chr( 9 )# #mappings.strPhysical# "
								& ( len( mappings.strArchive ) ? "[#mappings.strArchive#] " : "" )
								& ( len( mappings.inspect ) ? "(#mappings.inspect#)" : ""), true );
						}

					} catch( e ){
						systemOutput( e.message, true );
					}
					systemOutput( "ExpandPath( '/' ) #chr(9)# #ExpandPath( '/' )#" , true );

					param name="extensionDir" default="";
					if ( len( extensionDir)  ){
						function reportExtensions() localmode=true {
							systemOutput( "-------------- Extensions --------------", true );
							deployExtensions = DirectoryList( path=extensionDir, filter="*.lex" );
							loop array="#deployExtensions#" item="lexFile" {
								SystemOutput("Manually installing extension [#lexFile#]", true);
								FileCopy( lexFile, getTempDirectory() ); // make a copy, so lucee doesn't delete it after installing
								admin
									action="updateRHExtension"
									type="server"
									password="#request.adminPassword#"
									source="#getTempDirectory()##ListLast( lexFile, "\/")#";
							}
							if ( ArrayLen( deployExtensions ) eq 0)
								SystemOutput( "No *.lex extension files found in directory [#extensionDir#], directory exists: [#DirectoryExists(extensionDir)#]", true );
						}
						reportExtensions();
					}


					systemOutput( "-------------- Lucee Initialized --------------", true );
					systemOutput( "", true );
					systemOutput( "Running [#execute#]", true);
					systemOutput( "", true );

					param name="executeScriptByInclude" default="false";

					function parseAntParams (str) localmode=true {
						loopGuard=0;
						pos = findNoCase(" -D", str);
						params = {};
						do {
							vStart = findNoCase('"', str, pos+1 );
							if (vStart gt 0){
								name = mid(str, pos+3, (vStart-pos-4));
								vEnd = findNoCase('"', str, vStart+1);
								if (vEnd  gt 0){
									val = mid(str, vStart+1, vEnd-vStart-1);
									pos = vEnd+1;
									params[ name ]=val;
								}
							} else {
								pos = 0; // bail
							}
							if (pos gt 0) {
								pos = findNoCase(" -D", str, pos );
								loopGuard++;
							}
							if (loopGuard gt 100)
								throw "Error Loop protection @ #loopGuard#";
						} while ( pos > 0);
						return params;
					}

					function loadPassedVariables() localmode=true {
						// TODO this is windows only and doesn't work
						var params =  parseAntParams( server.system.environment.ANT_CMD_LINE_ARGS?: "" );
						// var props = FileRead( server.system.properties[ "lucee.base.dir" ] & "/ant_args.properties" );
						StructAppend(params, variables);
						var passedVariables = {};
						loop collection=#params# key="key" value="value" {
							if ( isSimpleValue( value ) )
								passedVariables[ key ] = value;
						}
						if ( structcount( passedVariables ) ) {
							systemOutput( "", true );
							systemOutput( "Variables", true);
							loop collection=passedVariables key="_k" value="_v" {
								systemOutput( chr(9) & _k & ": "  & _v , true);
							}
							systemOutput( "", true );
						}
						return passedVariables;
					}

					passedVariables = loadPassedVariables();

					if ( compile eq "true" ){
						systemOutput( "-------------- Start Compiling Webroot --------------", true );
						admin
							action="compileMapping"
							type="web"
							password=#request.adminPassword#
							virtual="/"
							stoponerror="false";
						systemOutput( "-------------- Finished Compiling Webroot --------------", true );
					}

					try {
						if ( executeScriptByInclude eq "true"){
							include template="#execute#";
						} else {
							_internalRequest(
								template = execute,
								url = passedVariables
							 ); // using internal request runs the Application.cfc, pass any simple variables in as URLs
						}
					} catch (e){
						request.errorThrown = true;
						systemOutput( cfcatch, true);
						rethrow;
					}
					/*
					if ( ! FileExists( execute ) ){
						systemOutput( DirectoryList( path="/" ), true);
						systemOutput( DirectoryList( path=webroot ), true);
						//systemOutput( ExpandPath( execute ) ), true);
						throw "Execute: [#execute#] file not found";
					} else {
						include template="#execute#";
					}
					*/

					systemOutput( "", true );
					systemOutput( "-------------- Finished --------------", true );
				} catch (e){
					if ( !request.errorThrown )
						systemOutput( cfcatch, true);
					rethrow;
				}
		]]>
		</script>
		<echots message="Lucee Stopping" />
	</target>
</project>